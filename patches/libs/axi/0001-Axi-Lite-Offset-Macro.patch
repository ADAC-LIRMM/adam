diff --git a/include/axi/assign.svh b/include/axi/assign.svh
index 80667eb0..c39244b4 100644
--- a/include/axi/assign.svh
+++ b/include/axi/assign.svh
@@ -537,6 +537,74 @@
 `define AXI_LITE_ASSIGN_RESP_STRUCT(lhs, rhs) `__AXI_LITE_TO_RESP(assign, lhs, ., rhs, .)
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 
+////////////////////////////////////////////////////////////////////////////////////////////////////
+// Macro to apply an address offset to an AXI Lite interface
+// This macro adjusts the address signals of the AXI Lite master interface by subtracting a given
+// offset, while keeping other signals unchanged. It should be used to translate addresses for
+// AXI Lite transactions.
+//
+// Parameters:
+// - mst: AXI Lite Master interface to which the offset is applied.
+// - slv: AXI Lite Slave interface from which signals are taken.
+// - offset: Address offset to be subtracted from the address signals.
+//
+// Usage:
+// `AXI_LITE_OFFSET(axi_lite_master, axi_lite_slave, address_offset)
+//
+`define AXI_LITE_OFFSET(dst, src, offset) \
+    assign dst.aw_addr = src.aw_addr - (offset); \
+    assign dst.aw_prot = src.aw_prot; \
+    assign dst.aw_valid = src.aw_valid; \
+    assign src.aw_ready = dst.aw_ready; \
+    `AXI_LITE_ASSIGN_W(dst, src); \
+    `AXI_LITE_ASSIGN_B(src, dst); \
+    assign dst.ar_addr = src.ar_addr - (offset); \
+    assign dst.ar_prot = src.ar_prot; \
+    assign dst.ar_valid = src.ar_valid; \
+    assign src.ar_ready = dst.ar_ready; \
+    `AXI_LITE_ASSIGN_R(src, dst);
+////////////////////////////////////////////////////////////////////////////////////////////////////
+
+////////////////////////////////////////////////////////////////////////////////////////////////////
+// Macros to Tie Off AXI Lite Master and Slave Interfaces
+//
+// These macros safely tie off the AXI Lite master and slave interfaces. This
+// approach ensures that the interfaces are safely managed to prevent floating
+// signals or unintended behavior.
+//
+// AXI_LITE_MASTER_TIE_OFF(mst):
+// Ties off the AXI Lite Master interface.
+// - mst: The AXI Lite Master interface to tie off.
+// Usage: `AXI_LITE_MASTER_TIE_OFF(my_axi_lite_master)
+//
+// AXI_LITE_SLAVE_TIE_OFF(slv):
+// Ties off the AXI Lite Slave interface with an error on response.
+// - slv: The AXI Lite Slave interface to tie off.
+// Usage: `AXI_LITE_SLAVE_TIE_OFF(my_axi_lite_slave)
+//
+`define AXI_LITE_MASTER_TIE_OFF(mst) \
+    assign mst.aw_addr = '0; \
+    assign mst.aw_prot = 3'b000; \
+    assign mst.aw_valid = 1'b0; \
+    assign mst.w_data = '0; \
+    assign mst.w_strb = '0; \
+    assign mst.w_valid = 1'b0; \
+    assign mst.b_ready = 1'b0; \
+    assign mst.ar_addr = '0; \
+    assign mst.ar_prot = 3'b000; \
+    assign mst.ar_valid = 1'b0; \
+    assign mst.r_ready = 1'b0;
+
+`define AXI_LITE_SLAVE_TIE_OFF(slv) \
+    assign slv.aw_ready = 1'b0; \
+    assign slv.w_ready = 1'b0; \
+    assign slv.b_resp = 2'b11; /* error condition */ \
+    assign slv.b_valid = 1'b1; \
+    assign slv.ar_ready = 1'b0; \
+    assign slv.r_data = '0; \
+    assign slv.r_resp = 2'b11; /* error condition */ \
+    assign slv.r_valid = 1'b1;
+////////////////////////////////////////////////////////////////////////////////////////////////////
 
 ////////////////////////////////////////////////////////////////////////////////////////////////////
 // Macros for assigning flattened AXI ports to req/resp AXI structs
