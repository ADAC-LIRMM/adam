#!/usr/bin/env python3
"""
Vivado Flow generates bitstreams using Vivado.
"""

import argparse
import logging
import shutil
import subprocess
import sys
import yaml

from jinja2 import Template
from pathlib import Path, PosixPath

dry_run = False
assume_yes = False

logger = None

loggers = {
    'flow' : None,
    'vivado' : None,
}

tcl_template = Template("""
# Auto-generated by vivado_flow.py =========================================== #

set adam {{adam}}

# Create Vivado project ====================================================== #

create_project "{{name}}" "{{name}}" -part "{{part}}"

# Add source files =========================================================== #

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

set sources_1 [get_filesets sources_1]

add_files -norecurse -fileset $sources_1 [list \\
{%- for file in sources %}
  "$adam/{{file}}" \\
{%- endfor %}
]

set_property top "{{top}}" $sources_1

# Add constraint files ======================================================= #

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Get 'constrs_1' file set
set constrs_1 [get_filesets constrs_1]

# Add files to 'constrs_1' file set
add_files -norecurse -fileset $constrs_1 [list \\
{%- for file in constrs %}
  "$adam/{{file}}" \\
{%- endfor %}
]

# Add include dirs =========================================================== #

set include [list \\
{%- for dir in include %}
  "$adam/{{dir}}" \\
{%- endfor %}
]

set_property include_dirs $include $sources_1

# Add defines ================================================================ #

set_property verilog_define "{{ define | join(' ') }}" $sources_1

# Generate bitstream ========================================================= #

launch_runs impl_1 -to_step write_bitstream -jobs 8
wait_on_run impl_1

file copy \\
  "{{name}}/{{name}}.runs/impl_1/{{top}}.bit" \\
  "{{name}}.bit"

""")

def vivado_flow(*args, **kargs):
    target_name = kargs['target_name']
    target = kargs['target']
    fsets = kargs['fsets']
    proj_path = kargs['proj_path']
    vivado_path = kargs['vivado_path']

    tcl_data = {}

    safe_rm(vivado_path)
    vivado_path.mkdir(parents=True)

    tcl_data['adam'] = PosixPath(proj_path).resolve()
    tcl_data['name'] = target_name
    tcl_data['part'] = target['part'] 
    tcl_data['top'] = target['top']

    rtl = target['rtl']
    bhv = target['bhv']
    xdc = target['xdc']

    rtl = rtl if rtl else []
    bhv = bhv if bhv else []
    xdc = xdc if xdc else []

    sources = []
    for fset_name in rtl:
        sources += compile_fset(fsets[fset_name])
    tcl_data['sources'] = sources

    constrs = []
    for fset_name in xdc:
        constrs += compile_fset(fsets[fset_name])
    tcl_data['constrs'] = constrs

    include = target['include']
    define = target['define']

    include = include if include else []
    define = define if define else []

    tcl_data['include'] = include
    tcl_data['define'] = define

    tcl_raw = tcl_template.render(**tcl_data)
    
    tcl_path = vivado_path / f'{target_name}.tcl'

    safe_rm(tcl_path)

    with open(tcl_path, 'w') as file:
        file.write(tcl_raw)

    exec_cmd(['vivado', '-mode', 'batch', '-source', tcl_path],
        vivado_path, loggers['vivado'])


def exec_cmd(cmd, work_path, logger):
    if dry_run:
        return

    work_path = work_path.resolve()

    process = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE, 
        stderr=subprocess.STDOUT, 
        cwd=work_path
    )

    pipe = process.stdout
    for line in iter(pipe.readline, b''):
        logger.info(line.decode().strip())
    process.terminate()

    return process.returncode


def setup_log(log_path):
    global logger
    global loggers

    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s %(tag)-5s | %(message)s',
        "%Y-%m-%d %H:%M:%S")

    stdout_handler = logging.StreamHandler(sys.stdout)
    stdout_handler.setFormatter(formatter)
    root_logger.addHandler(stdout_handler)

    file_handler = logging.FileHandler(log_path, mode='a')
    file_handler.setFormatter(formatter)    
    root_logger.addHandler(file_handler)

    for key in loggers:
        loggers[key] = logging.LoggerAdapter(root_logger,
            extra={'tag':key.upper()})

    logger = loggers['flow']


def safe_rm(path):
    if path.exists():

        if assume_yes:
            answer = 'y'
        else:
            msg = f'{path} exists. Overwrite? (y/n): '
            answer = input(msg).lower()

        if answer == 'y':
            logger.warning(f'Overwriting {path}')

            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.unlink()
        else:
            raise RuntimeError('Abort.')


def compile_fset(fset):
    root = PosixPath(fset['root'])
    return [root/path for path in fset['files']]

def main():
    global dry_run
    global assume_yes
    global logger
    global loggers

    parser = argparse.ArgumentParser(
        description='Vivado Flow generates bitstreams using Vivado.')

    parser.add_argument('-p', '--project', type=Path,
        help='ADAM project path.')
    parser.add_argument('-w', '--work', type=Path,
        help='work directory path') 
    parser.add_argument('-t', '--target', type=str,
        help='The Vivado target.')                        
    parser.add_argument('-d', '--dry-run', action='store_true',
        help='Perform a dry run, do not actually run Vivado.')
    parser.add_argument('-y', '--assume-yes', action='store_true',
        help='Assume "yes" for all prompts.')

    args = parser.parse_args()

    proj_path = args.project
    if not proj_path:
        proj_path = Path(__file__).parent.parent.resolve()

    work_path = args.work
    if not work_path:
        work_path = proj_path / 'work'
    work_path.mkdir(parents=True, exist_ok=True)

    adam_yaml_path = proj_path / 'adam.yml'
    with open(adam_yaml_path, 'r') as f:
        adam_yaml = yaml.safe_load(f)

    target_name = args.target
    targets = adam_yaml['vivado']
    if not target_name:
        if not targets:
            raise RuntimeError('No targets for Vivado.')

    dry_run = args.dry_run
    assume_yes = args.assume_yes

    target_name = list(targets.keys())[0]
    target = targets[target_name]

    target_path = work_path / target_name
    target_path.mkdir(parents=True, exist_ok=True)
    
    vivado_path = target_path / 'vivado'
    
    log_path = target_path / f'{target_name}.log'

    fsets = adam_yaml['fsets']

    setup_log(log_path)

    logger.info('Flow started.')

    common_kargs = {
        'target_name' : target_name,
        'target' : target,
        'fsets' : fsets,
        'proj_path' : proj_path,
        'vivado_path' : vivado_path,
    }

    vivado_flow(**common_kargs)

if __name__ == '__main__':
    main()