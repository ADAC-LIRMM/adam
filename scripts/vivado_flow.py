#!/usr/bin/env python3
"""
Vivado Flow is an automation tool for Vivado tasks.

Supported commands:
  - project: Creates the project for a given target.
  - test: Executes the test suite for a given target.
"""

import argparse
import shutil
import subprocess
import yaml

from jinja2 import Template
from pathlib import Path, PosixPath

proj_path = Path(__file__).parent.parent.resolve()
work_path = proj_path / 'work'
vivado_path = work_path / 'vivado'

adam_yaml_path = proj_path / 'adam.yml'

project_template = Template("""
# Auto-generated by vivado_flow.py =========================================== #

set proj "{{ proj_path }}"
set work "{{ work_path }}"
cd $work

# Creates Vivado project ===================================================== #

set name "{{ name }}"
set part "{{ part }}"

create_project $name $name -part $part

set proj_dir [get_property directory [current_project]]

# Add source files =========================================================== #

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

set sources_1 [get_filesets sources_1]

add_files -norecurse -fileset $sources_1 [list \\
{%- for file in sources_1 %}
  $proj/{{ file }} \\
{%- endfor %}
]

set_property top "{{ top_sources_1 }}" $sources_1

# Add simulation files ======================================================= #

# Create 'sim_1' file set (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Get 'sim_1' file set
set sim_1 [get_filesets sim_1]

# Add files to 'sim_1' file set
add_files -norecurse -fileset $sim_1 [list \\
{%- for file in sim_1 %}
  $proj/{{ file }} \\
{%- endfor %}
]

set_property top "{{ top_sim_1 }}" $sim_1

# Add constraint files ======================================================= #

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Get 'constrs_1' file set
set constrs_1 [get_filesets constrs_1]

# Add files to 'constrs_1' file set
add_files -norecurse -fileset $constrs_1 [list \\
{%- for file in constrs_1 %}
  $proj/{{ file }} \\
{%- endfor %}
]

# Add include dirs =========================================================== #

set include [list \\
{%- for dir in include %}
  $proj/{{ dir }} \\
{%- endfor %}
]

set_property include_dirs $include $sources_1
set_property include_dirs $include $sim_1

# Add defines ================================================================ #

set_property verilog_define "{{ define_sources_1 | join(' ') }}" $sources_1
set_property verilog_define "{{ define_sim_1 | join(' ') }}" $sim_1

""")

test_template = Template("""
# Auto-generated by vivado_flow.py =========================================== #

set proj "{{ proj_path }}"
set work "{{ work_path }}"
cd $work

# Open Vivado project ======================================================== #

set name "{{ name }}"

open_project $name/$name.xpr

# Define list of testbench modules =========================================== #

set testbenches [list \\
{%- for testbench in testbenches %}
  {{ testbench }} \\
{%- endfor %}
]

# For each testbench ========================================================= #

foreach testbench $testbenches {

    # Set the test as top simulation module
    set_property top $testbench [get_filesets sim_1]

    puts "$testbench: Simulation launched"

    # Run simulation
    launch_simulation -quiet
    run all -quiet
    close_sim -quiet

    # Get simulation log
    set log_path $name/$name.sim/sim_1/behav/xsim/simulate.log
    set log [read [open $log_path r]]

    # Check success
    if {[string first "\\$stop" $log] != -1} {
        puts "$testbench: Success"
    } else {
        puts "$testbench: Failed"
    }

}

""")

dry_run = False
assume_yes = False

def project(target_name):
    tcl_data = {}

    vivado_path.mkdir(parents=True, exist_ok=True)

    with open(adam_yaml_path, 'r') as file:
        yaml_data = yaml.safe_load(file)

    targets = yaml_data['vivado']

    if not target_name:
        target_name = list(targets.keys())[0]

    target = targets[target_name]

    vivado_proj_path = vivado_path / target_name

    tcl_data['proj_path'] = PosixPath(proj_path).resolve()
    tcl_data['work_path'] = PosixPath(vivado_path).resolve()
    tcl_data['name'] = target_name
    tcl_data['part'] = target['part'] 
    tcl_data['top_sources_1'] = target['top']
    tcl_data['top_sim_1'] = target['top_sim']

    rtl = target['rtl']
    bhv = target['bhv']
    xdc = target['xdc']

    rtl = rtl if rtl else []
    bhv = bhv if bhv else []
    xdc = xdc if xdc else []

    sources_1 = []
    for file_set_name in rtl:
        file_set = yaml_data['file_sets'][file_set_name]
        sources_1 += fset2list(file_set)
    tcl_data['sources_1'] = sources_1

    sim_1 = []
    for file_set_name in bhv:
        file_set = yaml_data['file_sets'][file_set_name]
        sim_1 += fset2list(file_set)
    tcl_data['sim_1'] = sim_1

    constrs_1 = []
    for file_set_name in xdc:
        file_set = yaml_data['file_sets'][file_set_name]
        constrs_1 += fset2list(file_set)
    tcl_data['constrs_1'] = constrs_1

    include = target['include']
    define = target['define']
    define_simulation = target['define_simulation']

    include = include if include else []
    define = define if define else []
    define_simulation = define_simulation if define_simulation else []

    tcl_data['include'] = include
    tcl_data['define_sources_1'] = define
    tcl_data['define_sim_1'] = define_simulation

    tcl_raw = project_template.render(**tcl_data)
    
    tcl_path = vivado_path / f'{target_name}.tcl'

    safe_rm(tcl_path)

    with open(tcl_path, 'w') as file:
        file.write(tcl_raw)

    safe_rm(vivado_proj_path)

    exec_tcl(tcl_path, vivado_path)

def test(target_name):
    tcl_data = {}

    vivado_path.mkdir(parents=True, exist_ok=True)

    with open(adam_yaml_path, 'r') as file:
        yaml_data = yaml.safe_load(file)

    targets = yaml_data['vivado']

    if not target_name:
        target_name = list(targets.keys())[0]

    target = targets[target_name]

    vivado_proj_path = vivado_path / target_name

    tcl_data['proj_path'] = PosixPath(proj_path).resolve()
    tcl_data['work_path'] = PosixPath(vivado_path).resolve()
    tcl_data['name'] = target_name
    
    test = target['test']
    test = test if test else []

    tcl_data['testbenches'] = test

    tcl_raw = test_template.render(**tcl_data)
    
    tcl_path = vivado_path / f'{target_name}_test.tcl'

    safe_rm(tcl_path)

    with open(tcl_path, 'w') as file:
        file.write(tcl_raw)

    exec_tcl(tcl_path, vivado_path)

def exec_tcl(tcl_path, work_dir):
    if dry_run:
        return

    cmd = f'vivado -mode batch -source {tcl_path}'
    subprocess.run(cmd, shell=True, cwd=work_dir)

def safe_rm(path):
    path = Path(path)

    if path.exists():

        if assume_yes:
            answer = 'y'
        else:
            msg = f'{path} exists. Overwrite? (y/n): '
            answer = input(msg).lower()

        if answer == 'y':
            if path.is_dir():
                shutil.rmtree(path)
            else:
                path.unlink()
        else:
            raise RuntimeError('Abort.')

def fset2list(file_set):
    
    if file_set['files'] is None:
        file_set['files'] = []

    root = PosixPath(file_set['root'])
    return [root/path for path in file_set['files']]

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Vivado Flow is an automation tool for Vivado tasks.',
        epilog="Note: Vivado must be in the $PATH for this script to work."
    )

    parser.add_argument('-t', '--target', type=str,
        help='The Vivado target.')                        
    parser.add_argument('-d', '--dry-run', action='store_true',
        help='Perform a dry run, do not actually run Vivado.')
    parser.add_argument('-y', '--assume-yes', action='store_true',
        help='Assume "yes" for all prompts.')

    # Add subparsers for the subcommands
    subparsers = parser.add_subparsers(
        title='command',
        help='Supported commands.',
        dest='command'
    )

    # Define the 'project' command
    project_parser = subparsers.add_parser('project',
        description='Initializes a new project for a given target.',
        help='Creates the project for a given target.')

    # Define the 'test' command
    test_parser = subparsers.add_parser('test',
        description='Runs the test suite',
        epilog='The project must already exist.',
        help='Executes the test suite for a given target.')

    args = parser.parse_args()

    dry_run = args.dry_run
    assume_yes = args.assume_yes

    if args.command == 'project':
        project(args.target)
    elif args.command == 'test':
        test(args.target)
    else:
        print("Invalid command.")
        parser.print_help()
        exit(-1)