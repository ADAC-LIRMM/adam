#!/usr/bin/env python3
"""
Generates a SystemVerilog configuration package for ADAM based on an
intermediary YAML configuration file generated by adam.py. This is distinct
from the adam.yml file.
"""

import argparse
import os
import subprocess
import yaml

from datetime import datetime
from jinja2 import Template

template = Template("""
/*
 * ============================================================================
 * ADAM Configuration Package
 * ============================================================================
 *
 * This SystemVerilog package was auto-generated.
 *
 * Date   : {{date}}
 * Target : {{target}}
 * Branch : {{branch}}
 * Commit : {{commit}}
 *
 * It is not recommended to modify this this file.
 * ============================================================================
 */

`ifndef SYNTHESIS
    `timescale 1ns/1ps
`endif

package {{name}};

    typedef logic [{{addr_width-1}}:0] ADDR_T;

    typedef ADDR_T [0:{{no_mems}}] MEM_SIZE_T;

    typedef struct {
        ADDR_T start;
        ADDR_T end_;
        ADDR_T inc;
    } MMAP_T;

    typedef struct {
        int ADDR_WIDTH;
        int DATA_WIDTH;

        int GPIO_WIDTH;

        ADDR_T RST_BOOT_ADDR;

        int NO_CPUS;
        int NO_DMAS;
        int NO_HSPS;
        int NO_MEMS;

        bit EN_LPCPU;
        bit EN_LPMEM;
        bit EN_DEBUG;

        ADDR_T LPMEM_SIZE;

        MEM_SIZE_T MEM_SIZE;

        int NO_LSPA_GPIOS;
        int NO_LSPA_SPIS;
        int NO_LSPA_TIMERS;
        int NO_LSPA_UARTS;

        int NO_LSPB_GPIOS;
        int NO_LSPB_SPIS;
        int NO_LSPB_TIMERS;
        int NO_LSPB_UARTS;

        int EN_BOOTSTRAP_CPU0;
        int EN_BOOTSTRAP_MEM0;
        int EN_BOOTSTRAP_LPCPU;
        int EN_BOOTSTRAP_LPMEM;

        logic [31:0] DEBUG_IDCODE;
        ADDR_T       DEBUG_ADDR_HALT;
        ADDR_T       DEBUG_ADDR_EXCEPTION;

        int FAB_MAX_TRANS;

        MMAP_T MMAP_LPMEM;
        MMAP_T MMAP_SYSCFG;
        MMAP_T MMAP_LSPA;
        MMAP_T MMAP_LSPB;

        ADDR_T MMAP_BOUNDRY;

        MMAP_T MMAP_DEBUG;
        MMAP_T MMAP_HSP;
        MMAP_T MMAP_MEM;
    } CFG_T;

    localparam CFG_T CFG = '{
        ADDR_WIDTH : {{addr_width}},
        DATA_WIDTH : {{data_width}},

        GPIO_WIDTH : {{gpio_width}},

        RST_BOOT_ADDR : {{rst_boot_addr}},

        NO_CPUS : {{no_cpus}},
        NO_DMAS : {{no_dmas}},
        NO_HSPS : {{no_hsps}},
        NO_MEMS : {{no_mems}},

        EN_LPCPU : {{en_lpcpu}},
        EN_LPMEM : {{en_lpmem}},
        EN_DEBUG : {{en_debug}},

        LPMEM_SIZE : {{lpmem_size}},
        MEM_SIZE : {{mem_size}},

        NO_LSPA_GPIOS  : {{no_lspa_gpios}},
        NO_LSPA_SPIS   : {{no_lspa_spis}},
        NO_LSPA_TIMERS : {{no_lspa_timers}},
        NO_LSPA_UARTS  : {{no_lspa_uarts}},

        NO_LSPB_GPIOS  : {{no_lspb_gpios}},
        NO_LSPB_SPIS   : {{no_lspb_spis}},
        NO_LSPB_TIMERS : {{no_lspb_timers}},
        NO_LSPB_UARTS  : {{no_lspb_uarts}},

        EN_BOOTSTRAP_CPU0  : {{en_bootstrap_cpu0}},
        EN_BOOTSTRAP_MEM0  : {{en_bootstrap_mem0}},
        EN_BOOTSTRAP_LPCPU : {{en_bootstrap_lpcpu}},
        EN_BOOTSTRAP_LPMEM : {{en_bootstrap_lpmem}},

        DEBUG_IDCODE         : {{debug_idcode}},
        DEBUG_ADDR_HALT      : {{debug_addr_halt}},
        DEBUG_ADDR_EXCEPTION : {{debug_addr_exception}},

        FAB_MAX_TRANS : {{fab_max_trans}},

        MMAP_LPMEM  : {{mmap_lpmem}},
        MMAP_SYSCFG : {{mmap_syscfg}},
        MMAP_LSPA   : {{mmap_lspa}},
        MMAP_LSPB   : {{mmap_lspb}},

        MMAP_BOUNDRY : {{mmap_boundry}},

        MMAP_DEBUG : {{mmap_debug}},
        MMAP_HSP   : {{mmap_hsp}},
        MMAP_MEM   : {{mmap_mem}}
    };

`ifndef SYNTHESIS

    typedef struct {
        time CLK_PERIOD;
        int  RST_CYCLES;

        time TA;
        time TT;
    } BHV_CFG_T;

    localparam BHV_CFG_T BHV_CFG = '{
        CLK_PERIOD : {{clk_period}}ns,
        RST_CYCLES : {{rst_cycles}},

        TA : {{ta}}ns,
        TT : {{tt}}ns // CLK_PERIOD - TA
    };

`endif

endpackage
""")

bool_fields = [
    'en_lpcpu',
    'en_lpmem',
    'en_debug',
    'en_bootstrap_cpu0',
    'en_bootstrap_mem0',
    'en_bootstrap_lpcpu',
    'en_bootstrap_lpmem'
]

hex_fields = [
    'rst_boot_addr',
    'debug_idcode',
    'debug_addr_halt',
    'debug_addr_exception',
    'mmap_boundry'
]

mmap_fields = [
    'mmap_lpmem',
    'mmap_syscfg',
    'mmap_lspa',
    'mmap_lspb',
    'mmap_debug',
    'mmap_hsp',
    'mmap_mem'
]


def format_hex(value, width):
    hex_digits = (width+3) // 4
    hex_value = f"{value:0{hex_digits}x}"
    return f"{width}'h{hex_value}"


def format_mem_size(array, width):
    array = array + [0]
    formatted_array = [format_hex(item, width) for item in array]
    return "'{" + ", ".join(formatted_array) + "}"


def format_mmap(array, width):
    formatted_array = [format_hex(item, width) for item in array]
    while len(formatted_array) < 3:
        formatted_array += ["'0"]
    return "'{" + ", ".join(formatted_array) + "}"


def get_git_info():
    cwd = os.path.dirname(os.path.abspath(__file__))

    # Get the current branch name
    branch = subprocess.check_output(
        ['git', 'rev-parse', '--abbrev-ref', 'HEAD'], cwd=cwd
    )
    branch = branch.decode('utf-8').strip()

    # Get the last commit hash
    commit = subprocess.check_output(['git', 'rev-parse', 'HEAD'], cwd=cwd)
    commit = commit.decode('utf-8').strip()

    # Check if the repository is in a dirty state, ignoring submodules
    if subprocess.check_output(
        ['git', 'status', '--porcelain', '--ignore-submodules'], cwd=cwd
    ):
        commit += " (dirty)"

    return branch, commit


def gen_pkg(input_file, output_file, name='adam_cfg_pkg', target=None):
    with open(input_file, 'r') as file:
        params = yaml.safe_load(file)

    params['name'] = name

    params['date'] = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
    params['branch'], params['commit'] = get_git_info()
    params['target'] = target

    width = params['addr_width']

    for key in bool_fields:
        params[key] = int(params[key])

    for key in hex_fields:
        params[key] = format_hex(params[key], width)

    for key in mmap_fields:
        params[key] = format_mmap(params[key], width)

    params['mem_size'] = format_mem_size(params['mem_size'], width)

    rendered = template.render(**params)

    with open(output_file, 'w') as f:
        f.write(rendered)


def main():
    parser = argparse.ArgumentParser(description=__doc__.strip())
    parser.add_argument(
        'input', type=str,
        help='Input YAML configuration file.'
    )
    parser.add_argument(
        '-o', '--output', type=str, required=True,
        help='Output SystemVerilog file.'
    )
    parser.add_argument(
        '-n', '--name', type=str, default='adam_cfg_pkg',
        help='SystemVerilog package name (default: adam_cfg_pkg).'
    )
    parser.add_argument(
        '-t', '--target', type=str, default='default',
        help='The ADAM target.'
    )

    args = parser.parse_args()

    gen_pkg(args.input, args.output, args.name, args.target)


if __name__ == "__main__":
    main()
